(load "load.ss")

(unless (= (length argv) 1)
  (displayln "usage: main.ss FILENAME")
  (exit 1))

(load "list.ss")
(load "read.ss")

(define (compile-exprs es sep)
  (let loop ((es es))
    (unless (null? es)
      (compile-expr (car es))
      (unless (null? (cdr es))
        (display sep)
        (loop (cdr es))))))

(define (compile-expr e)
  (cond
   ((and (boolean? e) e) (display "true"))
   ((boolean? e) (display "false"))
   ((number? e) (display e))
   ((string? e) (write e))
   ((symbol? e)
    (display (format "scheme['~a']" e)))
   ((list? e)
    (define rator-e (car e))
    (define rand-es (cdr e))
    (cond
     ((eq? rator-e '=)
      (compile-expr (cadr e))
      (display " === ")
      (compile-expr (caddr e)))
     ((eq? rator-e 'begin)
      (compile-exprs (cdr e) ";\n"))
     ((eq? rator-e 'define)
      (cond
       ((symbol? (car rand-es))
        (display (format "scheme['~a'] = " (car rand-es)))
        (compile-expr (cadr rand-es))
        (displayln ";"))
       ((pair? (car rand-es))
        (compile-expr `(define ,(caar rand-es)
                         (lambda ,(cdar rand-es)
                           ,@(cdr rand-es)))))
       (else
        (error 'compile-expr (format "invalid syntax ~s" e)))))
     ((eq? rator-e 'lambda)
      (display "(function() {")
      (displayln "let scheme = Object.assign({}, $root);")
      (let loop ((i 0)
                 (ids (car rand-es)))
        (unless (null? ids)
          (display (format "scheme['~a'] = arguments[~a];" (car ids) i))
          (loop (+ i 1) (cdr ids))))
      (let loop ((body-es (cdr rand-es)))
        (unless (null? body-es)
          (cond
           ((null? (cdr body-es))
            (display "return ")
            (compile-expr (car body-es)))
           (#t
            (compile-expr (car body-es))
            (displayln ";")
            (loop (cdr body-es))))))
      (displayln "})"))
     ((eq? rator-e 'if)
      (display "(function() { if (")
      (compile-expr (cadr e))
      (displayln ") {")
      (display "return ")
      (compile-expr (caddr e))
      (displayln "} else {")
      (display "return ")
      (compile-expr (cadddr e))
      (displayln "}})()"))
     ((eq? rator-e 'unless)
      (compile-expr `(if (not ,(cadr e)) (begin ,@(cddr e)) (void))))
     (#t
      (define rand-es (cdr e))
      (compile-expr rator-e)
      (display "(")
      (compile-exprs rand-es ",")
      (display ")"))))
   (#t (error 'compile-expr (format "invalid expr ~s" e)))))

(define (compile filename)
  (define exprs
    (call-with-input-file filename
      (lambda (in)
        (let loop ((exprs null))
          (define e (read in))
          (if (eof-object? e)
              (reverse exprs)
              (loop (cons e exprs)))))))
  (call-with-input-file "compiler/prelude.js"
    (lambda (in)
      (displayln (port->string in))))
  (compile-exprs exprs ";\n"))

(compile (car argv))
